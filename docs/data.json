{
    "project": {
        "name": "Entropy",
        "description": "JavaScript entity system for writing games.",
        "version": "0.3.0"
    },
    "files": {
        "src\\core\\engine.js": {
            "name": "src\\core\\engine.js",
            "modules": {},
            "classes": {
                "Engine": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\core\\entity.js": {
            "name": "src\\core\\entity.js",
            "modules": {},
            "classes": {
                "Entity": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\core\\pool.js": {
            "name": "src\\core\\pool.js",
            "modules": {},
            "classes": {
                "Pool": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\core\\query.js": {
            "name": "src\\core\\query.js",
            "modules": {},
            "classes": {
                "Query": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\entropy.js": {
            "name": "src\\entropy.js",
            "modules": {
                "Entropy": 1
            },
            "classes": {
                "Entropy": 1
            },
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {
        "Entropy": {
            "name": "Entropy",
            "submodules": {},
            "classes": {
                "Engine": 1,
                "Entity": 1,
                "Pool": 1,
                "Query": 1,
                "Entropy": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "src\\entropy.js",
            "line": 32,
            "description": "Main Entropy module and top namespace."
        }
    },
    "classes": {
        "Engine": {
            "name": "Engine",
            "shortname": "Engine",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Entropy",
            "file": "src\\core\\engine.js",
            "line": 16,
            "extends": "EventEmitter",
            "is_constructor": 1
        },
        "Entity": {
            "name": "Entity",
            "shortname": "Entity",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Entropy",
            "file": "src\\core\\entity.js",
            "line": 13,
            "description": "Entity class.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "name",
                    "description": "[description]",
                    "type": "String"
                },
                {
                    "name": "pattern",
                    "description": "[description]",
                    "type": "Object"
                },
                {
                    "name": "engine",
                    "description": "[description]",
                    "type": "Engine"
                }
            ]
        },
        "Pool": {
            "name": "Pool",
            "shortname": "Pool",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Entropy",
            "file": "src\\core\\pool.js",
            "line": 3,
            "description": "Simple implemenation of stack.",
            "params": [
                {
                    "name": "initialSize",
                    "description": "initial pool size",
                    "type": "Number"
                }
            ]
        },
        "Query": {
            "name": "Query",
            "shortname": "Query",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Entropy",
            "file": "src\\core\\query.js",
            "line": 11,
            "description": "Used to perform matching of entities.\nOnly parameter is an array of component names to include or object with `include` and/or `exclude` properties,\nwitch are arrays of component names to respectively include and/or exclude.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "query",
                    "description": "query conditions",
                    "type": "Object|Array"
                }
            ]
        },
        "Entropy": {
            "name": "Entropy",
            "shortname": "Entropy",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Entropy",
            "namespace": "",
            "file": "src\\entropy.js",
            "line": 32,
            "description": "Main static framework. Used as top namespace.",
            "static": 1
        }
    },
    "classitems": [
        {
            "file": "src\\core\\engine.js",
            "line": 24,
            "description": "[game description]",
            "type": "{[type]}",
            "class": "Engine"
        },
        {
            "file": "src\\core\\engine.js",
            "line": 30,
            "description": "Indicates the greatest entity ID present in the system.\nUsed to generate new IDs.",
            "itemtype": "property",
            "name": "_gratestEntityID",
            "access": "private",
            "tagname": "",
            "type": "Number",
            "class": "Engine"
        },
        {
            "file": "src\\core\\engine.js",
            "line": 40,
            "description": "Pool of currently not used entity IDs. Will be reused.",
            "itemtype": "property",
            "name": "_idsToReuse",
            "access": "private",
            "tagname": "",
            "type": "Pool",
            "class": "Engine"
        },
        {
            "file": "src\\core\\engine.js",
            "line": 49,
            "description": "Systems that are processed every tick.",
            "itemtype": "property",
            "name": "_systems",
            "access": "private",
            "tagname": "",
            "type": "Array",
            "class": "Engine"
        },
        {
            "file": "src\\core\\engine.js",
            "line": 58,
            "description": "Array with entities. Array index corresponds to ID of an entity.",
            "itemtype": "property",
            "name": "_entities",
            "access": "private",
            "tagname": "",
            "type": "Array",
            "class": "Engine"
        },
        {
            "file": "src\\core\\engine.js",
            "line": 83,
            "description": "Initialize components and entities pools.",
            "class": "Engine"
        },
        {
            "file": "src\\core\\engine.js",
            "line": 95,
            "description": "Registers new component pattern.\nOnly argument should be an object with obligatory `name` property and `initialize` method.\nThis method is used to assign some data to component object. `this` inside `initialize` function is a\nreference to newly created component object.",
            "example": [
                "\n    Entropy.Engine.Component({\n        name: \"Position\",\n        initialize: function (x, y) {\n            this.x = x;\n            this.y = y;\n        },\n        //not obligatory\n        reset: function () {\n            this.x = 0;\n            this.y = 0;\n        }\n    });"
            ],
            "itemtype": "method",
            "name": "Component",
            "static": 1,
            "params": [
                {
                    "name": "component",
                    "description": "component pattern",
                    "type": "Object"
                }
            ],
            "class": "Engine"
        },
        {
            "file": "src\\core\\engine.js",
            "line": 123,
            "description": "Registers new entity pattern.\n\nPattern is an object with following properties:\n - __name__ (required) - name of an entity\n - __create__ (required) - method called when creating new entity. Here you should add initial components to an entity.\n  `this` inside function references newly created entity object (instance of {{#crossLink \"Entity\"}}Entity{{/crossLink}} class).\n  Function is called with first argument being `game` object and every others are parameters with witch {{#crossLink \"Engine/create:method\"}}create{{/crossLink}} method is called.\n - __remove__ (optional) - method called when entity is removed from the system. This is good place to clean after entity (ex. remove some resources from renderer).\n  First and only argument is a `game` object.",
            "example": [
                "\n    Entropy.Engine.Entity({\n        name: \"Ball\",\n        create: function (game, x, y, radius) {\n            var sprite = new Sprite(\"Ball\");\n\n            game.container.make(\"renderer\").addSprite(sprite);\n\n            this.add(\"Position\", x, y)\n                .add(\"Radius\", radius)\n                .add(\"Velocity\", 5, 5)\n                .add(\"Sprite\", sprite);\n        },\n        //not oblgatory\n        remove: function (game) {\n            game.container.make(\"renderer\").removeSprite(this.components.sprite.sprite);\n        }\n    });"
            ],
            "itemtype": "method",
            "name": "Entity",
            "static": 1,
            "params": [
                {
                    "name": "entity",
                    "description": "entity pattern",
                    "type": "Object"
                }
            ],
            "class": "Engine"
        },
        {
            "file": "src\\core\\engine.js",
            "line": 161,
            "description": "Registers new system pattern.",
            "example": [
                "\n    Entropy.Engine.System({\n        name: \"MovementSystem\",\n        priority: 1, //not obligatory\n        initialize: function () {\n            this.query = new Entropy.Engine.Query([\"Position\", \"Velocity\"]);\n        },\n        update: function (delta) {\n            var entities = this.engine.getEntities(this.query);\n            var e;\n\n            var i = 0;\n            while (e = entities[i]) {\n                var position = e.components.position;\n                var velocity = e.components.velocity;\n\n                position.x += delta / 1000 * velocity.vx;\n                position.y += delta / 1000 * velocity.vy;\n\n                i++;\n            }     \n        },\n        //not obligatory\n        remove: function () {\n        \n        }\n    });"
            ],
            "itemtype": "method",
            "name": "System",
            "static": 1,
            "class": "Engine"
        },
        {
            "file": "src\\core\\engine.js",
            "line": 199,
            "description": "Used to perform matching of entities.\nOnly parameter is an array of component names to include or object with `include` and/or `exclude` properties,\nwitch are arrays of component names to respectively include and/or exclude.",
            "example": [
                "\n    var q1 = new Entropy.Engine.Query([\"Position\", \"Velocity\"]);\n    var q2 = new Entropy.Engine.Query({\n        include: [\"Position\", \"Velocity\"],\n        exclude: [\"Sprite\"]\n    });"
            ],
            "itemtype": "method",
            "name": "Query",
            "static": 1,
            "params": [
                {
                    "name": "criterions",
                    "description": "query matching criterions",
                    "type": "Array|Object"
                }
            ],
            "return": {
                "description": "query object",
                "type": "Object"
            },
            "class": "Engine"
        },
        {
            "file": "src\\core\\engine.js",
            "line": 220,
            "description": "Creates new entity using pattern identified by `name` parameter.\nEvery additional parameter will be applied to patterns `create` method.\nPatterns `create` method is called imediatelly after calling this method.",
            "example": [
                "\n    game.engine.create(\"Ball\", 5, 5, 5); //x, y, radius"
            ],
            "itemtype": "method",
            "name": "create",
            "params": [
                {
                    "name": "name",
                    "description": "first argument is a name of entity (entity pattern). Every additional argument will be applied to patterns `create` method.",
                    "type": "String",
                    "multiple": true
                }
            ],
            "return": {
                "description": "engine instance",
                "type": "Engine"
            },
            "class": "Engine"
        },
        {
            "file": "src\\core\\engine.js",
            "line": 257,
            "description": "Removes entity from engine.\nEntity removal does not happen imediatelly, but after current update cycle.",
            "example": [
                "\n    //somwhere in the system 'update' method\n    if (entity.components.hp.quantity <= 0) { //entity is dead, remove\n        game.engine.remove(entity);\n    }"
            ],
            "params": [
                {
                    "name": "entity",
                    "description": "Entity instance",
                    "type": "Entity"
                }
            ],
            "return": {
                "description": "Engine instance",
                "type": "Engine"
            },
            "class": "Engine"
        },
        {
            "file": "src\\core\\engine.js",
            "line": 282,
            "description": "Returns array of entities satisfying given {{#crossLink \"Query\"}}query{{/crossLink}} conditions.\nReturned arrays length does not correspond with matched entities quantity.\nTo loop over entities start from 0 index, and then check if element is different than 0.\nThis method guaranties, that entities will be arranged as subsequent array slice, starting from 0 index and ending on element equal to 0.\nThe array is in this form for performance reasons.",
            "example": [
                "\n    //in systems 'initialize' method...\n    this.query = new Entropy.Engine.Query([\"Position\", \"Velocity\"]);\n\n    //in systems 'update' method\n    var movingEntities = this.engine.getEntities(this.query);\n\n    //here do something with entities in loop\n    ..."
            ],
            "params": [
                {
                    "name": "query",
                    "description": "query object",
                    "type": "Query"
                }
            ],
            "return": {
                "description": "array of matched entities",
                "type": "Array"
            },
            "class": "Engine"
        },
        {
            "file": "src\\core\\engine.js",
            "line": 423,
            "description": "Removing entities.",
            "class": "Engine"
        },
        {
            "file": "src\\core\\engine.js",
            "line": 457,
            "description": "Adding entities.",
            "class": "Engine"
        },
        {
            "file": "src\\core\\engine.js",
            "line": 486,
            "description": "Modifying entities.",
            "class": "Engine"
        },
        {
            "file": "src\\core\\engine.js",
            "line": 518,
            "description": "Removing systems.",
            "class": "Engine"
        },
        {
            "file": "src\\core\\engine.js",
            "line": 537,
            "description": "Adding systems.",
            "class": "Engine"
        },
        {
            "file": "src\\core\\engine.js",
            "line": 553,
            "description": "Fetching query indexes.",
            "class": "Engine"
        },
        {
            "file": "src\\core\\engine.js",
            "line": 599,
            "description": "Returns ID for an entity. Reuses old IDs or creates new.",
            "access": "private",
            "tagname": "",
            "return": {
                "description": "new ID",
                "type": "Number"
            },
            "class": "Engine"
        },
        {
            "file": "src\\core\\engine.js",
            "line": 614,
            "description": "Initializes new query. Performs initial entity search.",
            "params": [
                {
                    "name": "query",
                    "description": "query object",
                    "type": "Object"
                }
            ],
            "class": "Engine"
        },
        {
            "file": "src\\core\\pool.js",
            "line": 20,
            "description": "Puts value in the pool. Named pool, because it is used to implement pooling of various object in engine.",
            "itemtype": "method",
            "name": "put",
            "params": [
                {
                    "name": "thing",
                    "description": "value to put in pool",
                    "type": "Any"
                }
            ],
            "class": "Pool"
        },
        {
            "file": "src\\core\\pool.js",
            "line": 38,
            "description": "Gets value from the pool. Returns last put value.",
            "itemtype": "method",
            "name": "get",
            "return": {
                "description": "value from the pool",
                "type": "Any"
            },
            "class": "Pool"
        },
        {
            "file": "src\\core\\pool.js",
            "line": 51,
            "description": "Returns current size of the pool (not maximum size).",
            "itemtype": "method",
            "name": "size",
            "return": {
                "description": "pool size",
                "type": "Number"
            },
            "class": "Pool"
        },
        {
            "file": "src\\entropy.js",
            "line": 8,
            "description": "Requiring polyfills for requestAnimationFrame and performance.now.",
            "class": "Entropy",
            "module": "Entropy"
        },
        {
            "file": "src\\entropy.js",
            "line": 20,
            "description": "Welcome message.",
            "class": "Entropy",
            "module": "Entropy"
        },
        {
            "file": "src\\entropy.js",
            "line": 43,
            "description": "Assignes new property to main Entropy namespace identified by key (uppercased).\nOnce assigned, can't be assigned again.\nCan be later accessed by: Entropy.KEY",
            "static": 1,
            "itemtype": "method",
            "name": "Const",
            "params": [
                {
                    "name": "key",
                    "description": "constans key",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "constans value",
                    "type": "Any"
                }
            ],
            "class": "Entropy",
            "module": "Entropy"
        }
    ],
    "warnings": [
        {
            "message": "Missing item type\n[game description]",
            "line": " src\\core\\engine.js:24"
        },
        {
            "message": "Missing item type\nInitialize components and entities pools.",
            "line": " src\\core\\engine.js:83"
        },
        {
            "message": "Missing item type\nRemoves entity from engine.\nEntity removal does not happen imediatelly, but after current update cycle.",
            "line": " src\\core\\engine.js:257"
        },
        {
            "message": "Missing item type\nReturns array of entities satisfying given {{#crossLink \"Query\"}}query{{/crossLink}} conditions.\nReturned arrays length does not correspond with matched entities quantity.\nTo loop over entities start from 0 index, and then check if element is different than 0.\nThis method guaranties, that entities will be arranged as subsequent array slice, starting from 0 index and ending on element equal to 0.\nThe array is in this form for performance reasons.",
            "line": " src\\core\\engine.js:282"
        },
        {
            "message": "Missing item type\nRemoving entities.",
            "line": " src\\core\\engine.js:423"
        },
        {
            "message": "Missing item type\nAdding entities.",
            "line": " src\\core\\engine.js:457"
        },
        {
            "message": "Missing item type\nModifying entities.",
            "line": " src\\core\\engine.js:486"
        },
        {
            "message": "Missing item type\nRemoving systems.",
            "line": " src\\core\\engine.js:518"
        },
        {
            "message": "Missing item type\nAdding systems.",
            "line": " src\\core\\engine.js:537"
        },
        {
            "message": "Missing item type\nFetching query indexes.",
            "line": " src\\core\\engine.js:553"
        },
        {
            "message": "Missing item type\nReturns ID for an entity. Reuses old IDs or creates new.",
            "line": " src\\core\\engine.js:599"
        },
        {
            "message": "Missing item type\nInitializes new query. Performs initial entity search.",
            "line": " src\\core\\engine.js:614"
        },
        {
            "message": "Missing item type\nRequiring polyfills for requestAnimationFrame and performance.now.",
            "line": " src\\entropy.js:8"
        },
        {
            "message": "Missing item type\nWelcome message.",
            "line": " src\\entropy.js:20"
        }
    ]
}